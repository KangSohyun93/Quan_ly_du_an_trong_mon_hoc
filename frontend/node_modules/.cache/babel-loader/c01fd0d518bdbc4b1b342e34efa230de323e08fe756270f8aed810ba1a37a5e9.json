{"ast":null,"code":"// frontend/src/services/api-client.js\nconst API_BASE_URL = \"http://localhost:5000\"; // Adjust to your backend URL\n\nexport const fetchTasks = async (mode = \"user\") => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks?mode=${mode}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) throw new Error(`Failed to fetch tasks: ${response.status}`);\n  return response.json();\n};\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\n  const response = await fetch(`${API_BASE_URL}/api/task-checklists/${checklistId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      is_completed: isCompleted\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to update checklist item: HTTP status ${response.status}`);\n  }\n  return response.json();\n};\nexport const createTask = async taskData => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(taskData)\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to create task: HTTP status ${response.status}`);\n  }\n  return response.json();\n};\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to fetch projects: HTTP status ${response.status}`);\n  }\n  return response.json();\n};\nexport const fetchSprints = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/sprints`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to fetch sprints: HTTP status ${response.status}`);\n  }\n  return response.json();\n};\n\n// Fetch task details including subtasks and comments\nexport const fetchTaskDetails = async taskId => {\n  console.log(`Making request to: ${API_BASE_URL}/api/tasks/${taskId}`);\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`Fetch failed with status: ${response.status}, Response: ${errorText}`);\n    throw new Error(`Failed to fetch task details: HTTP status ${response.status}, ${errorText}`);\n  }\n  const data = await response.json();\n  console.log(\"Fetch successful, response data:\", data);\n  return data;\n};\n\n// Add a new comment\nexport const addComment = async (taskId, userId, commentText) => {\n  const response = await fetch(`${API_BASE_URL}/api/comments`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      task_id: taskId,\n      user_id: userId,\n      comment_text: commentText\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to add comment: HTTP status ${response.status}`);\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","fetchTasks","mode","response","fetch","method","headers","ok","Error","status","json","updateChecklistItem","checklistId","isCompleted","body","JSON","stringify","is_completed","createTask","taskData","fetchProjects","fetchSprints","fetchTaskDetails","taskId","console","log","errorText","text","error","data","addComment","userId","commentText","task_id","user_id","comment_text"],"sources":["D:/ITSS_Project/frontend/src/services/api-client.js"],"sourcesContent":["// frontend/src/services/api-client.js\r\nconst API_BASE_URL = \"http://localhost:5000\"; // Adjust to your backend URL\r\n\r\nexport const fetchTasks = async (mode = \"user\") => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks?mode=${mode}`, {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to fetch tasks: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\r\n  const response = await fetch(\r\n    `${API_BASE_URL}/api/task-checklists/${checklistId}`,\r\n    {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ is_completed: isCompleted }),\r\n    }\r\n  );\r\n  if (!response.ok) {\r\n    throw new Error(\r\n      `Failed to update checklist item: HTTP status ${response.status}`\r\n    );\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const createTask = async (taskData) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(taskData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to create task: HTTP status ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchProjects = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\r\n      `Failed to fetch projects: HTTP status ${response.status}`\r\n    );\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchSprints = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/sprints`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch sprints: HTTP status ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Fetch task details including subtasks and comments\r\nexport const fetchTaskDetails = async (taskId) => {\r\n  console.log(`Making request to: ${API_BASE_URL}/api/tasks/${taskId}`);\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error(\r\n      `Fetch failed with status: ${response.status}, Response: ${errorText}`\r\n    );\r\n    throw new Error(\r\n      `Failed to fetch task details: HTTP status ${response.status}, ${errorText}`\r\n    );\r\n  }\r\n  const data = await response.json();\r\n  console.log(\"Fetch successful, response data:\", data);\r\n  return data;\r\n};\r\n\r\n// Add a new comment\r\nexport const addComment = async (taskId, userId, commentText) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/comments`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      task_id: taskId,\r\n      user_id: userId,\r\n      comment_text: commentText,\r\n    }),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\r\n      `Failed to add comment: HTTP status ${response.status}`\r\n    );\r\n  }\r\n  return response.json();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}