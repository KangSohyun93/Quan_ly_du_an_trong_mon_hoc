{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITSS_Project\\\\frontend\\\\src\\\\components\\\\task\\\\KanbanView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./KanbanView.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle as fasCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as farCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\nimport { faComment } from \"@fortawesome/free-solid-svg-icons\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\nimport { fetchTasks, updateChecklistItem } from \"../../services/api-client\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const KanbanView = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [reportData, setReportData] = useState([]);\n  const [openTaskId, setOpenTaskId] = useState(null);\n\n  // Hàm xử lý nhấp vào icon công việc\n  const handleTaskClick = taskId => {\n    setOpenTaskId(openTaskId === taskId ? null : taskId);\n  };\n\n  // Fetch tasks từ API\n  useEffect(() => {\n    const loadTasks = async () => {\n      try {\n        const data = await fetchTasks();\n        console.log(\"Raw API data:\", data); // Kiểm tra dữ liệu gốc\n        const mappedTasks = data.map(task => {\n          console.log(\"Task checklists:\", task.checklists); // Kiểm tra checklists của mỗi task\n          return {\n            id: task.task_id,\n            title: task.title,\n            date: task.due_date ? new Date(task.due_date).toLocaleDateString() : \"\",\n            time: task.due_date ? new Date(task.due_date).toLocaleTimeString([], {\n              hour: \"2-digit\",\n              minute: \"2-digit\"\n            }) : \"\",\n            tags: [\"SQL\", \"Backend\"],\n            avatar: `https://i.pravatar.cc/24?img=${task.assigned_to || task.task_id}`,\n            comments: task.comment_count || 0,\n            subTasks: task.checklists ? task.checklists.map(checklist => ({\n              id: checklist.checklist_id,\n              text: checklist.item_description,\n              completed: checklist.is_completed\n            })) : [],\n            // Gán mảng rỗng nếu checklists không tồn tại\n            status: task.status.toLowerCase().replace(\"to-do\", \"to-do\").replace(\"in-progress\", \"in-progress\").replace(\"done\", \"completed\"),\n            overdue: task.due_date && new Date(task.due_date) < new Date() && task.status !== \"Done\"\n          };\n        });\n        setTasks(mappedTasks);\n        const counts = {\n          \"to-do\": 0,\n          \"in-progress\": 0,\n          \"completed\": 0\n        };\n        mappedTasks.forEach(task => {\n          counts[task.status]++;\n        });\n        setReportData([{\n          id: 1,\n          name: \"To-Do\",\n          status: \"to-do\",\n          count: counts[\"to-do\"]\n        }, {\n          id: 2,\n          name: \"In-progress\",\n          status: \"in-progress\",\n          count: counts[\"in-progress\"]\n        }, {\n          id: 3,\n          name: \"Completed\",\n          status: \"completed\",\n          count: counts[\"completed\"]\n        }]);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    loadTasks();\n  }, []);\n  const getStatusClass = (status, overdue) => {\n    if (status === \"completed\") return \"report-status-completed\";\n    if (overdue) return \"report-status-overdue\";\n    switch (status) {\n      case \"to-do\":\n        return \"report-status-to-do\";\n      case \"in-progress\":\n        return \"report-status-in-progress\";\n      default:\n        return \"\";\n    }\n  };\n  const getCircleClass = status => {\n    switch (status) {\n      case \"to-do\":\n        return \"circle-to-do\";\n      case \"in-progress\":\n        return \"circle-in-progress\";\n      case \"completed\":\n        return \"circle-completed\";\n      default:\n        return \"\";\n    }\n  };\n  const toggleSubTask = async (taskId, subTaskId) => {\n    try {\n      const currentTask = tasks.find(task => task.id === taskId);\n      const currentSubTask = currentTask.subTasks.find(sub => sub.id === subTaskId);\n      console.log(\"Toggling subtask:\", {\n        taskId,\n        subTaskId,\n        currentSubTask\n      }); // Debug log\n      await updateChecklistItem(subTaskId, !currentSubTask.completed);\n      setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? {\n        ...task,\n        subTasks: task.subTasks.map(subTask => subTask.id === subTaskId ? {\n          ...subTask,\n          completed: !subTask.completed\n        } : subTask)\n      } : task));\n      console.log(\"Subtask updated successfully\"); // Debug log\n    } catch (error) {\n      console.error(\"Error updating subtask:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"report-grid\",\n    children: reportData.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"h3\",\n          children: [group.name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"count-text\",\n            children: [\"(\", group.count.toString().padStart(2, \"0\"), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-circle ${getCircleClass(group.status)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), tasks.filter(task => task.status === group.status).map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `report-card ${getStatusClass(task.status, task.overdue)}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"report-card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"body_1\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-meta\",\n              children: [task.status === \"completed\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"completed-label\",\n                children: \"Completed \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 25\n              }, this), task.date, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"date-time-space\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 23\n              }, this), (task.status === \"to-do\" || task.status === \"in-progress\") && task.time && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-with-clock\",\n                children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faClock,\n                  className: \"clock-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 29\n                }, this), task.time]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 27\n              }, this), task.status === \"completed\" && task.time && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-tags\",\n          children: task.tags.map(tag => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `tag ${tag.toLowerCase()}`,\n            children: tag\n          }, tag, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: task.avatar,\n            alt: \"avatar\",\n            className: \"task-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-actions body_2\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-action-item\",\n              onClick: () => handleTaskClick(task.id),\n              style: {\n                cursor: \"pointer\"\n              },\n              children: [task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.length : 0, \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faClipboard\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 140\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-action-item\",\n              children: [task.comments, \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faComment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this), openTaskId === task.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"divider active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-subtasks active\",\n            children: task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.map((subTask, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"subtask\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-icon\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-count\",\n                  children: [index + 1, \".\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-text\",\n                  children: subTask.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `subtask-status ${subTask.completed ? \"completed\" : \"\"}`,\n                  onClick: e => {\n                    e.stopPropagation();\n                    toggleSubTask(task.id, subTask.id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: subTask.completed ? fasCheckCircle : farCircle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 31\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 29\n              }, this), index !== task.subTasks.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"divider active\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 31\n              }, this)]\n            }, subTask.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 27\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No subtasks available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }, this))]\n    }, group.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanView, \"iRR58t/IQPIVxEXKBHuSuESqm+8=\");\n_c = KanbanView;\nexport default KanbanView;\nvar _c;\n$RefreshReg$(_c, \"KanbanView\");","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faCheckCircle","fasCheckCircle","faCircle","farCircle","faClipboard","faComment","faClock","fetchTasks","updateChecklistItem","jsxDEV","_jsxDEV","Fragment","_Fragment","KanbanView","_s","tasks","setTasks","reportData","setReportData","openTaskId","setOpenTaskId","handleTaskClick","taskId","loadTasks","data","console","log","mappedTasks","map","task","checklists","id","task_id","title","date","due_date","Date","toLocaleDateString","time","toLocaleTimeString","hour","minute","tags","avatar","assigned_to","comments","comment_count","subTasks","checklist","checklist_id","text","item_description","completed","is_completed","status","toLowerCase","replace","overdue","counts","forEach","name","count","error","getStatusClass","getCircleClass","toggleSubTask","subTaskId","currentTask","find","currentSubTask","sub","prevTasks","subTask","className","children","group","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","filter","icon","tag","src","alt","onClick","style","cursor","length","every","index","e","stopPropagation","_c","$RefreshReg$"],"sources":["D:/ITSS_Project/frontend/src/components/task/KanbanView.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./KanbanView.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle as fasCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCircle as farCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faComment } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { fetchTasks, updateChecklistItem } from \"../../services/api-client\";\r\n\r\nexport const KanbanView = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [reportData, setReportData] = useState([]);\r\n  const [openTaskId, setOpenTaskId] = useState(null);\r\n\r\n  // Hàm xử lý nhấp vào icon công việc\r\n  const handleTaskClick = (taskId) => {\r\n    setOpenTaskId(openTaskId === taskId ? null : taskId);\r\n  };\r\n\r\n  // Fetch tasks từ API\r\n  useEffect(() => {\r\n    const loadTasks = async () => {\r\n      try {\r\n        const data = await fetchTasks();\r\n        console.log(\"Raw API data:\", data); // Kiểm tra dữ liệu gốc\r\n        const mappedTasks = data.map((task) => {\r\n          console.log(\"Task checklists:\", task.checklists); // Kiểm tra checklists của mỗi task\r\n          return {\r\n            id: task.task_id,\r\n            title: task.title,\r\n            date: task.due_date ? new Date(task.due_date).toLocaleDateString() : \"\",\r\n            time: task.due_date\r\n              ? new Date(task.due_date).toLocaleTimeString([], {\r\n                  hour: \"2-digit\",\r\n                  minute: \"2-digit\",\r\n                })\r\n              : \"\",\r\n            tags: [\"SQL\", \"Backend\"],\r\n            avatar: `https://i.pravatar.cc/24?img=${task.assigned_to || task.task_id}`,\r\n            comments: task.comment_count || 0,\r\n            subTasks: task.checklists\r\n              ? task.checklists.map((checklist) => ({\r\n                  id: checklist.checklist_id,\r\n                  text: checklist.item_description,\r\n                  completed: checklist.is_completed,\r\n                }))\r\n              : [], // Gán mảng rỗng nếu checklists không tồn tại\r\n            status: task.status\r\n              .toLowerCase()\r\n              .replace(\"to-do\", \"to-do\")\r\n              .replace(\"in-progress\", \"in-progress\")\r\n              .replace(\"done\", \"completed\"),\r\n            overdue:\r\n              task.due_date &&\r\n              new Date(task.due_date) < new Date() &&\r\n              task.status !== \"Done\",\r\n          };\r\n        });\r\n\r\n        setTasks(mappedTasks);\r\n\r\n        const counts = { \"to-do\": 0, \"in-progress\": 0, \"completed\": 0 };\r\n        mappedTasks.forEach((task) => {\r\n          counts[task.status]++;\r\n        });\r\n\r\n        setReportData([\r\n          { id: 1, name: \"To-Do\", status: \"to-do\", count: counts[\"to-do\"] },\r\n          {\r\n            id: 2,\r\n            name: \"In-progress\",\r\n            status: \"in-progress\",\r\n            count: counts[\"in-progress\"],\r\n          },\r\n          {\r\n            id: 3,\r\n            name: \"Completed\",\r\n            status: \"completed\",\r\n            count: counts[\"completed\"],\r\n          },\r\n        ]);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    loadTasks();\r\n  }, []);\r\n\r\n  const getStatusClass = (status, overdue) => {\r\n    if (status === \"completed\") return \"report-status-completed\";\r\n    if (overdue) return \"report-status-overdue\";\r\n    switch (status) {\r\n      case \"to-do\":\r\n        return \"report-status-to-do\";\r\n      case \"in-progress\":\r\n        return \"report-status-in-progress\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getCircleClass = (status) => {\r\n    switch (status) {\r\n      case \"to-do\":\r\n        return \"circle-to-do\";\r\n      case \"in-progress\":\r\n        return \"circle-in-progress\";\r\n      case \"completed\":\r\n        return \"circle-completed\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const toggleSubTask = async (taskId, subTaskId) => {\r\n    try {\r\n      const currentTask = tasks.find((task) => task.id === taskId);\r\n      const currentSubTask = currentTask.subTasks.find((sub) => sub.id === subTaskId);\r\n      console.log(\"Toggling subtask:\", { taskId, subTaskId, currentSubTask }); // Debug log\r\n      await updateChecklistItem(subTaskId, !currentSubTask.completed);\r\n\r\n      setTasks((prevTasks) =>\r\n        prevTasks.map((task) =>\r\n          task.id === taskId\r\n            ? {\r\n                ...task,\r\n                subTasks: task.subTasks.map((subTask) =>\r\n                  subTask.id === subTaskId\r\n                    ? { ...subTask, completed: !subTask.completed }\r\n                    : subTask\r\n                ),\r\n              }\r\n            : task\r\n        )\r\n      );\r\n      console.log(\"Subtask updated successfully\"); // Debug log\r\n    } catch (error) {\r\n      console.error(\"Error updating subtask:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"report-grid\">\r\n      {reportData.map((group) => (\r\n        <div key={group.id} className=\"status-block\">\r\n          <div className=\"column-header\">\r\n            <h3 className=\"h3\">\r\n              {group.name}{\" \"}\r\n              <span className=\"count-text\">\r\n                ({group.count.toString().padStart(2, \"0\")})\r\n              </span>\r\n            </h3>\r\n            <span\r\n              className={`status-circle ${getCircleClass(group.status)}`}\r\n            ></span>\r\n          </div>\r\n          {tasks\r\n            .filter((task) => task.status === group.status)\r\n            .map((task) => (\r\n              <div\r\n                key={task.id}\r\n                className={`report-card ${getStatusClass(\r\n                  task.status,\r\n                  task.overdue\r\n                )}`}\r\n              >\r\n                <div className=\"report-card-header\">\r\n                  <div className=\"header-left\">\r\n                    <h4 className=\"body_1\">{task.title}</h4>\r\n                    <div className=\"task-meta\">\r\n                      {task.status === \"completed\" && (\r\n                        <span className=\"completed-label\">Completed </span>\r\n                      )}\r\n                      {task.date}\r\n                      <span className=\"date-time-space\"></span>\r\n                      {(task.status === \"to-do\" ||\r\n                        task.status === \"in-progress\") &&\r\n                        task.time && (\r\n                          <span className=\"time-with-clock\">\r\n                            <FontAwesomeIcon\r\n                              icon={faClock}\r\n                              className=\"clock-icon\"\r\n                            />\r\n                            {task.time}\r\n                          </span>\r\n                        )}\r\n                      {task.status === \"completed\" && task.time && (\r\n                        <span>{task.time}</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"task-tags\">\r\n                  {task.tags.map((tag) => (\r\n                    <span key={tag} className={`tag ${tag.toLowerCase()}`}>\r\n                      {tag}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                <div className=\"task-info\">\r\n                  <img src={task.avatar} alt=\"avatar\" className=\"task-avatar\" />\r\n                  <div className=\"task-actions body_2\">\r\n                    <span\r\n                      className=\"task-action-item\"\r\n                      onClick={() => handleTaskClick(task.id)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.length : 0} <FontAwesomeIcon icon={faClipboard} />\r\n                    </span>\r\n                    <span className=\"task-action-item\">\r\n                      {task.comments} <FontAwesomeIcon icon={faComment} />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                {openTaskId === task.id && (\r\n                  <>\r\n                    <div className=\"divider active\"></div>\r\n                    <div className=\"task-subtasks active\">\r\n                      {task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? (\r\n                        task.subTasks.map((subTask, index) => (\r\n                          <div key={subTask.id}>\r\n                            <div className=\"subtask\">\r\n                              <span className=\"subtask-icon\">\r\n                                <span></span>\r\n                                <div></div>\r\n                              </span>\r\n                              <span className=\"subtask-count\">{index + 1}.</span>\r\n                              <span className=\"subtask-text\">{subTask.text}</span>\r\n                              <span\r\n                                className={`subtask-status ${\r\n                                  subTask.completed ? \"completed\" : \"\"\r\n                                }`}\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  toggleSubTask(task.id, subTask.id);\r\n                                }}\r\n                              >\r\n                                <FontAwesomeIcon\r\n                                  icon={\r\n                                    subTask.completed ? fasCheckCircle : farCircle\r\n                                  }\r\n                                />\r\n                              </span>\r\n                            </div>\r\n                            {index !== task.subTasks.length - 1 && (\r\n                              <div className=\"divider active\"></div>\r\n                            )}\r\n                          </div>\r\n                        ))\r\n                      ) : (\r\n                        <p>No subtasks available.</p>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}