{"ast":null,"code":"// frontend/src/services/api-client.js\nconst API_BASE_URL = \"http://localhost:5000\"; // Adjust based on your backend server\n\n// Fetch all tasks\nexport const fetchTasks = async (mode = \"user\") => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks?mode=${mode}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) throw new Error(`Failed to fetch tasks: ${response.status}`);\n  return response.json();\n};\n\n// Fetch task details with comments and subtasks\nexport const fetchTaskDetails = async taskId => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) throw new Error(`Failed to fetch task details: ${response.status}`);\n  return response.json();\n};\n\n// Add a comment to a task\nexport const addComment = async (taskId, userId, commentText) => {\n  const response = await fetch(`${API_BASE_URL}/api/comments`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      task_id: taskId,\n      user_id: userId,\n      comment_text: commentText\n    })\n  });\n  if (!response.ok) throw new Error(`Failed to add comment: ${response.status}`);\n  return response.json();\n};\n\n// Update a checklist item\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\n  const response = await fetch(`${API_BASE_URL}/api/checklists/${checklistId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      is_completed: isCompleted\n    })\n  });\n  if (!response.ok) throw new Error(`Failed to update checklist item: ${response.status}`);\n  return response.json();\n};\n\n// Update task status\nexport const updateTaskStatus = async (taskId, status) => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/status`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      status\n    })\n  });\n  if (!response.ok) throw new Error(`Failed to update task status: ${response.status}`);\n  return response.json();\n};\n\n// Fetch all projects\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) throw new Error(`Failed to fetch projects: ${response.status}`);\n  return response.json();\n};\n\n// Fetch all sprints\nexport const fetchSprints = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/sprints`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) throw new Error(`Failed to fetch sprints: ${response.status}`);\n  return response.json();\n};\n\n// Create a new task with subtasks\nexport const createTask = async taskData => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(taskData)\n  });\n  if (!response.ok) throw new Error(`Failed to create task: ${response.status}`);\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","fetchTasks","mode","response","fetch","method","headers","ok","Error","status","json","fetchTaskDetails","taskId","addComment","userId","commentText","body","JSON","stringify","task_id","user_id","comment_text","updateChecklistItem","checklistId","isCompleted","is_completed","updateTaskStatus","fetchProjects","fetchSprints","createTask","taskData"],"sources":["D:/ITSS_Project/frontend/src/services/api-client.js"],"sourcesContent":["// frontend/src/services/api-client.js\r\nconst API_BASE_URL = \"http://localhost:5000\"; // Adjust based on your backend server\r\n\r\n// Fetch all tasks\r\nexport const fetchTasks = async (mode = \"user\") => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks?mode=${mode}`, {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to fetch tasks: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\n// Fetch task details with comments and subtasks\r\nexport const fetchTaskDetails = async (taskId) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}`, {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to fetch task details: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\n// Add a comment to a task\r\nexport const addComment = async (taskId, userId, commentText) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/comments`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ task_id: taskId, user_id: userId, comment_text: commentText }),\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to add comment: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\n// Update a checklist item\r\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/checklists/${checklistId}`, {\r\n    method: \"PATCH\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ is_completed: isCompleted }),\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to update checklist item: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\n// Update task status\r\nexport const updateTaskStatus = async (taskId, status) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/status`, {\r\n    method: \"PATCH\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ status }),\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to update task status: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\n// Fetch all projects\r\nexport const fetchProjects = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to fetch projects: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\n// Fetch all sprints\r\nexport const fetchSprints = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/sprints`, {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to fetch sprints: ${response.status}`);\r\n  return response.json();\r\n};\r\n\r\n// Create a new task with subtasks\r\nexport const createTask = async (taskData) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(taskData),\r\n  });\r\n  if (!response.ok) throw new Error(`Failed to create task: ${response.status}`);\r\n  return response.json();\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,uBAAuB,CAAC,CAAC;;AAE9C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAI,GAAG,MAAM,KAAK;EACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,mBAAmBE,IAAI,EAAE,EAAE;IACrEG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CAAC,CAAC;EACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0BL,QAAQ,CAACM,MAAM,EAAE,CAAC;EAC9E,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EAChD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,cAAcY,MAAM,EAAE,EAAE;IAClEP,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CAAC,CAAC;EACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iCAAiCL,QAAQ,CAACM,MAAM,EAAE,CAAC;EACrF,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG,MAAAA,CAAOD,MAAM,EAAEE,MAAM,EAAEC,WAAW,KAAK;EAC/D,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,eAAe,EAAE;IAC3DK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAEP,MAAM;MAAEQ,OAAO,EAAEN,MAAM;MAAEO,YAAY,EAAEN;IAAY,CAAC;EACtF,CAAC,CAAC;EACF,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0BL,QAAQ,CAACM,MAAM,EAAE,CAAC;EAC9E,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMY,mBAAmB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,WAAW,KAAK;EACrE,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,mBAAmBuB,WAAW,EAAE,EAAE;IAC5ElB,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEO,YAAY,EAAED;IAAY,CAAC;EACpD,CAAC,CAAC;EACF,IAAI,CAACrB,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oCAAoCL,QAAQ,CAACM,MAAM,EAAE,CAAC;EACxF,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMgB,gBAAgB,GAAG,MAAAA,CAAOd,MAAM,EAAEH,MAAM,KAAK;EACxD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,cAAcY,MAAM,SAAS,EAAE;IACzEP,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAET;IAAO,CAAC;EACjC,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iCAAiCL,QAAQ,CAACM,MAAM,EAAE,CAAC;EACrF,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,eAAe,EAAE;IAC3DK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CAAC,CAAC;EACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6BL,QAAQ,CAACM,MAAM,EAAE,CAAC;EACjF,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMkB,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,cAAc,EAAE;IAC1DK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CAAC,CAAC;EACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4BL,QAAQ,CAACM,MAAM,EAAE,CAAC;EAChF,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMmB,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAM3B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,YAAY,EAAE;IACxDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,QAAQ;EAC/B,CAAC,CAAC;EACF,IAAI,CAAC3B,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0BL,QAAQ,CAACM,MAAM,EAAE,CAAC;EAC9E,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}