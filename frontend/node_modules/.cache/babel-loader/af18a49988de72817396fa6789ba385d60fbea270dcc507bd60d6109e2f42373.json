{"ast":null,"code":"const API_URL = 'http://localhost:5000/api/instructor-groups';\nconst fetchGroupsByInstructorId = async instructorId => {\n  try {\n    const response = await fetch(`${API_URL}?instructor_id=${instructorId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      console.warn('Dữ liệu trả về từ API không phải là mảng:', data);\n      return [];\n    }\n    return data.map(group => {\n      var _group$project, _group$project2, _group$project3;\n      return {\n        ...group,\n        classId: group.class_id,\n        group_name: group.group_name || 'Unnamed Group',\n        description: ((_group$project = group.project) === null || _group$project === void 0 ? void 0 : _group$project.description) || 'No description available',\n        members: group.members || [],\n        status: ((_group$project2 = group.project) === null || _group$project2 === void 0 ? void 0 : _group$project2.status) || 'Ongoing',\n        updated_at: ((_group$project3 = group.project) === null || _group$project3 === void 0 ? void 0 : _group$project3.updated_at) || new Date().toISOString()\n      };\n    });\n  } catch (error) {\n    console.error('Error in fetchGroupsByInstructorId:', error.message);\n    throw error;\n  }\n};\nconst fetchClassById = async classId => {\n  try {\n    const response = await fetch(`${API_URL}/classes/${classId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in fetchClassById:', error.message);\n    throw error;\n  }\n};\nexport { fetchGroupsByInstructorId, fetchClassById };","map":{"version":3,"names":["API_URL","fetchGroupsByInstructorId","instructorId","response","fetch","ok","Error","status","data","json","Array","isArray","console","warn","map","group","_group$project","_group$project2","_group$project3","classId","class_id","group_name","description","project","members","updated_at","Date","toISOString","error","message","fetchClassById"],"sources":["C:/2024.2/Quan_ly_du_an_trong_mon_hoc - Copy/frontend/src/services/instructorGroupService.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api/instructor-groups';\r\n\r\nconst fetchGroupsByInstructorId = async (instructorId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}?instructor_id=${instructorId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    if (!Array.isArray(data)) {\r\n      console.warn('Dữ liệu trả về từ API không phải là mảng:', data);\r\n      return [];\r\n    }\r\n    return data.map(group => ({\r\n      ...group,\r\n      classId: group.class_id,\r\n      group_name: group.group_name || 'Unnamed Group',\r\n      description: group.project?.description || 'No description available',\r\n      members: group.members || [],\r\n      status: group.project?.status || 'Ongoing',\r\n      updated_at: group.project?.updated_at || new Date().toISOString(),\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error in fetchGroupsByInstructorId:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchClassById = async (classId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/classes/${classId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in fetchClassById:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport { fetchGroupsByInstructorId, fetchClassById };"],"mappings":"AAAA,MAAMA,OAAO,GAAG,6CAA6C;AAE7D,MAAMC,yBAAyB,GAAG,MAAOC,YAAY,IAAK;EACxD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,kBAAkBE,YAAY,EAAE,CAAC;IACxE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;MACxBI,OAAO,CAACC,IAAI,CAAC,2CAA2C,EAAEL,IAAI,CAAC;MAC/D,OAAO,EAAE;IACX;IACA,OAAOA,IAAI,CAACM,GAAG,CAACC,KAAK;MAAA,IAAAC,cAAA,EAAAC,eAAA,EAAAC,eAAA;MAAA,OAAK;QACxB,GAAGH,KAAK;QACRI,OAAO,EAAEJ,KAAK,CAACK,QAAQ;QACvBC,UAAU,EAAEN,KAAK,CAACM,UAAU,IAAI,eAAe;QAC/CC,WAAW,EAAE,EAAAN,cAAA,GAAAD,KAAK,CAACQ,OAAO,cAAAP,cAAA,uBAAbA,cAAA,CAAeM,WAAW,KAAI,0BAA0B;QACrEE,OAAO,EAAET,KAAK,CAACS,OAAO,IAAI,EAAE;QAC5BjB,MAAM,EAAE,EAAAU,eAAA,GAAAF,KAAK,CAACQ,OAAO,cAAAN,eAAA,uBAAbA,eAAA,CAAeV,MAAM,KAAI,SAAS;QAC1CkB,UAAU,EAAE,EAAAP,eAAA,GAAAH,KAAK,CAACQ,OAAO,cAAAL,eAAA,uBAAbA,eAAA,CAAeO,UAAU,KAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAClE,CAAC;IAAA,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACC,OAAO,CAAC;IACnE,MAAMD,KAAK;EACb;AACF,CAAC;AAED,MAAME,cAAc,GAAG,MAAOX,OAAO,IAAK;EACxC,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,YAAYmB,OAAO,EAAE,CAAC;IAC7D,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOoB,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACC,OAAO,CAAC;IACxD,MAAMD,KAAK;EACb;AACF,CAAC;AAED,SAAS3B,yBAAyB,EAAE6B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}