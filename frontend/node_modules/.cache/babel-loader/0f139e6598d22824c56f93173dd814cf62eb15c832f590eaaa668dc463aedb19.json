{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITSS_Project\\\\frontend\\\\src\\\\components\\\\task\\\\KanbanView.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/task/KanbanView.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./KanbanView.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle as fasCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as farCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\nimport { faComment } from \"@fortawesome/free-solid-svg-icons\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\nimport { fetchTasks, updateChecklistItem, updateTaskStatus } from \"../../services/api-client\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const KanbanView = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [reportData, setReportData] = useState([]);\n  const [openTaskId, setOpenTaskId] = useState(null);\n\n  // Hàm xử lý nhấp vào icon công việc\n  const handleTaskClick = taskId => {\n    setOpenTaskId(openTaskId === taskId ? null : taskId);\n  };\n\n  // Function to update reportData based on tasks\n  const updateReportData = updatedTasks => {\n    const counts = {\n      \"to-do\": 0,\n      \"in-progress\": 0,\n      \"done\": 0\n    };\n    updatedTasks.forEach(task => {\n      counts[task.status]++;\n    });\n    setReportData([{\n      id: 1,\n      name: \"To-Do\",\n      status: \"to-do\",\n      count: counts[\"to-do\"]\n    }, {\n      id: 2,\n      name: \"In-progress\",\n      status: \"in-progress\",\n      count: counts[\"in-progress\"]\n    }, {\n      id: 3,\n      name: \"Done\",\n      status: \"done\",\n      count: counts[\"done\"]\n    }]);\n  };\n\n  // Function to calculate completion percentage\n  const getCompletionPercentage = task => {\n    if (!task.subTasks || task.subTasks.length === 0) return \"0%\";\n    const completedSubtasks = task.subTasks.filter(subTask => subTask.completed).length;\n    const totalSubtasks = task.subTasks.length;\n    const percentage = completedSubtasks / totalSubtasks * 100;\n    return `${percentage.toFixed(0)}%`; // Round to nearest whole number\n  };\n\n  // Fetch tasks từ API\n  useEffect(() => {\n    const loadTasks = async () => {\n      try {\n        const data = await fetchTasks();\n        console.log(\"Raw API data:\", data); // Kiểm tra dữ liệu gốc\n        const mappedTasks = data.map(task => {\n          console.log(\"Task checklists:\", task.checklists); // Kiểm tra checklists của mỗi task\n          return {\n            id: task.task_id,\n            title: task.title,\n            date: task.due_date ? new Date(task.due_date).toLocaleDateString() : \"\",\n            time: task.due_date ? new Date(task.due_date).toLocaleTimeString([], {\n              hour: \"2-digit\",\n              minute: \"2-digit\"\n            }) : \"\",\n            tags: [\"SQL\", \"Backend\"],\n            avatar: `https://i.pravatar.cc/24?img=${task.assigned_to || task.task_id}`,\n            comments: task.comment_count || 0,\n            subTasks: task.checklists ? task.checklists.map(checklist => ({\n              id: checklist.checklist_id,\n              text: checklist.item_description,\n              completed: checklist.is_completed\n            })) : [],\n            // Gán mảng rỗng nếu checklists không tồn tại\n            status: task.status.toLowerCase().replace(\"to-do\", \"to-do\").replace(\"in-progress\", \"in-progress\").replace(\"done\", \"done\"),\n            overdue: task.due_date && new Date(task.due_date) < new Date() && task.status !== \"Done\"\n          };\n        });\n        setTasks(mappedTasks);\n        updateReportData(mappedTasks); // Update reportData initially\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    loadTasks();\n  }, []);\n  const getStatusClass = (status, overdue) => {\n    if (status === \"done\") return \"report-status-completed\";\n    if (overdue) return \"report-status-overdue\";\n    switch (status) {\n      case \"to-do\":\n        return \"report-status-to-do\";\n      case \"in-progress\":\n        return \"report-status-in-progress\";\n      default:\n        return \"\";\n    }\n  };\n  const getCircleClass = status => {\n    switch (status) {\n      case \"to-do\":\n        return \"circle-to-do\";\n      case \"in-progress\":\n        return \"circle-in-progress\";\n      case \"done\":\n        return \"circle-completed\";\n      default:\n        return \"\";\n    }\n  };\n  const toggleSubTask = async (taskId, subTaskId) => {\n    try {\n      const currentTask = tasks.find(task => task.id === taskId);\n      const currentSubTask = currentTask.subTasks.find(sub => sub.id === subTaskId);\n      console.log(\"Toggling subtask:\", {\n        taskId,\n        subTaskId,\n        currentSubTask\n      }); // Debug log\n      await updateChecklistItem(subTaskId, !currentSubTask.completed);\n\n      // Update local state for the subtask\n      let updatedTasks = tasks.map(task => task.id === taskId ? {\n        ...task,\n        subTasks: task.subTasks.map(subTask => subTask.id === subTaskId ? {\n          ...subTask,\n          completed: !subTask.completed\n        } : subTask)\n      } : task);\n\n      // Check and update task status based on subtask completion\n      const updatedTask = updatedTasks.find(task => task.id === taskId);\n      const allSubtasksCompleted = updatedTask.subTasks.every(subTask => subTask.completed);\n      const anySubtaskCompleted = updatedTask.subTasks.some(subTask => subTask.completed);\n      const subtaskCount = updatedTask.subTasks.length;\n      let newStatus = updatedTask.status;\n      if (subtaskCount === 1 && allSubtasksCompleted) {\n        // If task has exactly 1 subtask and it's completed, move to Done\n        newStatus = \"done\";\n      } else if (updatedTask.status === \"to-do\" && anySubtaskCompleted) {\n        // If task is in To-Do and at least one subtask is completed, move to In-Progress\n        newStatus = \"in-progress\";\n      } else if (allSubtasksCompleted && updatedTask.status !== \"done\") {\n        // If all subtasks are completed, move to Done (for tasks with more than 1 subtask)\n        newStatus = \"done\";\n      } else if (updatedTask.status === \"done\" && !allSubtasksCompleted) {\n        // If task is in Done and a subtask is unticked\n        if (subtaskCount > 1) {\n          newStatus = \"in-progress\"; // Move to In-Progress if more than 1 subtask\n        } else {\n          newStatus = \"to-do\"; // Move to To-Do if exactly 1 subtask\n        }\n      } else if (updatedTask.status === \"in-progress\" && !anySubtaskCompleted) {\n        // If task is in In-Progress and all subtasks are unticked, move to To-Do\n        newStatus = \"to-do\";\n      }\n\n      // Update task status in the database if it has changed\n      if (newStatus !== updatedTask.status) {\n        await updateTaskStatus(taskId, newStatus); // Call API to update task status\n        updatedTasks = updatedTasks.map(task => task.id === taskId ? {\n          ...task,\n          status: newStatus\n        } : task);\n      }\n\n      // Update both tasks and reportData states\n      setTasks(updatedTasks);\n      updateReportData(updatedTasks);\n      console.log(\"Subtask updated successfully, new status:\", newStatus); // Debug log\n    } catch (error) {\n      console.error(\"Error updating subtask:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"report-grid\",\n    children: reportData.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"h3\",\n          children: [group.name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"count-text\",\n            children: [\"(\", group.count.toString().padStart(2, \"0\"), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-circle ${getCircleClass(group.status)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), tasks.filter(task => task.status === group.status).map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `report-card ${getStatusClass(task.status, task.overdue)}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"report-card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"body_1\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-meta\",\n              children: [task.status === \"done\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"completed-label\",\n                children: \"Completed \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 25\n              }, this), task.status === \"in-progress\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"completion-percentage\",\n                children: [getCompletionPercentage(task), \" Complete\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 25\n              }, this), task.date, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"date-time-space\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 23\n              }, this), (task.status === \"to-do\" || task.status === \"in-progress\") && task.time && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-with-clock\",\n                children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faClock,\n                  className: \"clock-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 29\n                }, this), task.time]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 27\n              }, this), task.status === \"done\" && task.time && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-tags\",\n          children: task.tags.map(tag => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `tag ${tag.toLowerCase()}`,\n            children: tag\n          }, tag, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: task.avatar,\n            alt: \"avatar\",\n            className: \"task-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-actions body_2\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-action-item\",\n              onClick: () => handleTaskClick(task.id),\n              style: {\n                cursor: \"pointer\"\n              },\n              children: [task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.length : 0, \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faClipboard\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 140\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-action-item\",\n              children: [task.comments, \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faComment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }, this), openTaskId === task.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"divider active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-subtasks active\",\n            children: task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.map((subTask, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"subtask\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-icon\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 285,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-count\",\n                  children: [index + 1, \".\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-text\",\n                  children: subTask.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `subtask-status ${subTask.completed ? \"completed\" : \"\"}`,\n                  onClick: e => {\n                    e.stopPropagation();\n                    toggleSubTask(task.id, subTask.id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: subTask.completed ? fasCheckCircle : farCircle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 31\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 29\n              }, this), index !== task.subTasks.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"divider active\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 31\n              }, this)]\n            }, subTask.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 27\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No subtasks available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }, this))]\n    }, group.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanView, \"iRR58t/IQPIVxEXKBHuSuESqm+8=\");\n_c = KanbanView;\nexport default KanbanView;\nvar _c;\n$RefreshReg$(_c, \"KanbanView\");","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faCheckCircle","fasCheckCircle","faCircle","farCircle","faClipboard","faComment","faClock","fetchTasks","updateChecklistItem","updateTaskStatus","jsxDEV","_jsxDEV","Fragment","_Fragment","KanbanView","_s","tasks","setTasks","reportData","setReportData","openTaskId","setOpenTaskId","handleTaskClick","taskId","updateReportData","updatedTasks","counts","forEach","task","status","id","name","count","getCompletionPercentage","subTasks","length","completedSubtasks","filter","subTask","completed","totalSubtasks","percentage","toFixed","loadTasks","data","console","log","mappedTasks","map","checklists","task_id","title","date","due_date","Date","toLocaleDateString","time","toLocaleTimeString","hour","minute","tags","avatar","assigned_to","comments","comment_count","checklist","checklist_id","text","item_description","is_completed","toLowerCase","replace","overdue","error","getStatusClass","getCircleClass","toggleSubTask","subTaskId","currentTask","find","currentSubTask","sub","updatedTask","allSubtasksCompleted","every","anySubtaskCompleted","some","subtaskCount","newStatus","className","children","group","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","icon","tag","src","alt","onClick","style","cursor","index","e","stopPropagation","_c","$RefreshReg$"],"sources":["D:/ITSS_Project/frontend/src/components/task/KanbanView.js"],"sourcesContent":["// frontend/src/components/task/KanbanView.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./KanbanView.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle as fasCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCircle as farCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faComment } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { fetchTasks, updateChecklistItem, updateTaskStatus } from \"../../services/api-client\";\r\n\r\nexport const KanbanView = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [reportData, setReportData] = useState([]);\r\n  const [openTaskId, setOpenTaskId] = useState(null);\r\n\r\n  // Hàm xử lý nhấp vào icon công việc\r\n  const handleTaskClick = (taskId) => {\r\n    setOpenTaskId(openTaskId === taskId ? null : taskId);\r\n  };\r\n\r\n  // Function to update reportData based on tasks\r\n  const updateReportData = (updatedTasks) => {\r\n    const counts = { \"to-do\": 0, \"in-progress\": 0, \"done\": 0 };\r\n    updatedTasks.forEach((task) => {\r\n      counts[task.status]++;\r\n    });\r\n\r\n    setReportData([\r\n      { id: 1, name: \"To-Do\", status: \"to-do\", count: counts[\"to-do\"] },\r\n      {\r\n        id: 2,\r\n        name: \"In-progress\",\r\n        status: \"in-progress\",\r\n        count: counts[\"in-progress\"],\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Done\",\r\n        status: \"done\",\r\n        count: counts[\"done\"],\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // Function to calculate completion percentage\r\n  const getCompletionPercentage = (task) => {\r\n    if (!task.subTasks || task.subTasks.length === 0) return \"0%\";\r\n    const completedSubtasks = task.subTasks.filter((subTask) => subTask.completed).length;\r\n    const totalSubtasks = task.subTasks.length;\r\n    const percentage = (completedSubtasks / totalSubtasks) * 100;\r\n    return `${percentage.toFixed(0)}%`; // Round to nearest whole number\r\n  };\r\n\r\n  // Fetch tasks từ API\r\n  useEffect(() => {\r\n    const loadTasks = async () => {\r\n      try {\r\n        const data = await fetchTasks();\r\n        console.log(\"Raw API data:\", data); // Kiểm tra dữ liệu gốc\r\n        const mappedTasks = data.map((task) => {\r\n          console.log(\"Task checklists:\", task.checklists); // Kiểm tra checklists của mỗi task\r\n          return {\r\n            id: task.task_id,\r\n            title: task.title,\r\n            date: task.due_date ? new Date(task.due_date).toLocaleDateString() : \"\",\r\n            time: task.due_date\r\n              ? new Date(task.due_date).toLocaleTimeString([], {\r\n                  hour: \"2-digit\",\r\n                  minute: \"2-digit\",\r\n                })\r\n              : \"\",\r\n            tags: [\"SQL\", \"Backend\"],\r\n            avatar: `https://i.pravatar.cc/24?img=${task.assigned_to || task.task_id}`,\r\n            comments: task.comment_count || 0,\r\n            subTasks: task.checklists\r\n              ? task.checklists.map((checklist) => ({\r\n                  id: checklist.checklist_id,\r\n                  text: checklist.item_description,\r\n                  completed: checklist.is_completed,\r\n                }))\r\n              : [], // Gán mảng rỗng nếu checklists không tồn tại\r\n            status: task.status\r\n              .toLowerCase()\r\n              .replace(\"to-do\", \"to-do\")\r\n              .replace(\"in-progress\", \"in-progress\")\r\n              .replace(\"done\", \"done\"),\r\n            overdue:\r\n              task.due_date &&\r\n              new Date(task.due_date) < new Date() &&\r\n              task.status !== \"Done\",\r\n          };\r\n        });\r\n\r\n        setTasks(mappedTasks);\r\n        updateReportData(mappedTasks); // Update reportData initially\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    loadTasks();\r\n  }, []);\r\n\r\n  const getStatusClass = (status, overdue) => {\r\n    if (status === \"done\") return \"report-status-completed\";\r\n    if (overdue) return \"report-status-overdue\";\r\n    switch (status) {\r\n      case \"to-do\":\r\n        return \"report-status-to-do\";\r\n      case \"in-progress\":\r\n        return \"report-status-in-progress\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getCircleClass = (status) => {\r\n    switch (status) {\r\n      case \"to-do\":\r\n        return \"circle-to-do\";\r\n      case \"in-progress\":\r\n        return \"circle-in-progress\";\r\n      case \"done\":\r\n        return \"circle-completed\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const toggleSubTask = async (taskId, subTaskId) => {\r\n    try {\r\n      const currentTask = tasks.find((task) => task.id === taskId);\r\n      const currentSubTask = currentTask.subTasks.find((sub) => sub.id === subTaskId);\r\n      console.log(\"Toggling subtask:\", { taskId, subTaskId, currentSubTask }); // Debug log\r\n      await updateChecklistItem(subTaskId, !currentSubTask.completed);\r\n\r\n      // Update local state for the subtask\r\n      let updatedTasks = tasks.map((task) =>\r\n        task.id === taskId\r\n          ? {\r\n              ...task,\r\n              subTasks: task.subTasks.map((subTask) =>\r\n                subTask.id === subTaskId\r\n                  ? { ...subTask, completed: !subTask.completed }\r\n                  : subTask\r\n              ),\r\n            }\r\n          : task\r\n      );\r\n\r\n      // Check and update task status based on subtask completion\r\n      const updatedTask = updatedTasks.find((task) => task.id === taskId);\r\n      const allSubtasksCompleted = updatedTask.subTasks.every((subTask) => subTask.completed);\r\n      const anySubtaskCompleted = updatedTask.subTasks.some((subTask) => subTask.completed);\r\n      const subtaskCount = updatedTask.subTasks.length;\r\n      let newStatus = updatedTask.status;\r\n\r\n      if (subtaskCount === 1 && allSubtasksCompleted) {\r\n        // If task has exactly 1 subtask and it's completed, move to Done\r\n        newStatus = \"done\";\r\n      } else if (updatedTask.status === \"to-do\" && anySubtaskCompleted) {\r\n        // If task is in To-Do and at least one subtask is completed, move to In-Progress\r\n        newStatus = \"in-progress\";\r\n      } else if (allSubtasksCompleted && updatedTask.status !== \"done\") {\r\n        // If all subtasks are completed, move to Done (for tasks with more than 1 subtask)\r\n        newStatus = \"done\";\r\n      } else if (updatedTask.status === \"done\" && !allSubtasksCompleted) {\r\n        // If task is in Done and a subtask is unticked\r\n        if (subtaskCount > 1) {\r\n          newStatus = \"in-progress\"; // Move to In-Progress if more than 1 subtask\r\n        } else {\r\n          newStatus = \"to-do\"; // Move to To-Do if exactly 1 subtask\r\n        }\r\n      } else if (updatedTask.status === \"in-progress\" && !anySubtaskCompleted) {\r\n        // If task is in In-Progress and all subtasks are unticked, move to To-Do\r\n        newStatus = \"to-do\";\r\n      }\r\n\r\n      // Update task status in the database if it has changed\r\n      if (newStatus !== updatedTask.status) {\r\n        await updateTaskStatus(taskId, newStatus); // Call API to update task status\r\n        updatedTasks = updatedTasks.map((task) =>\r\n          task.id === taskId ? { ...task, status: newStatus } : task\r\n        );\r\n      }\r\n\r\n      // Update both tasks and reportData states\r\n      setTasks(updatedTasks);\r\n      updateReportData(updatedTasks);\r\n\r\n      console.log(\"Subtask updated successfully, new status:\", newStatus); // Debug log\r\n    } catch (error) {\r\n      console.error(\"Error updating subtask:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"report-grid\">\r\n      {reportData.map((group) => (\r\n        <div key={group.id} className=\"status-block\">\r\n          <div className=\"column-header\">\r\n            <h3 className=\"h3\">\r\n              {group.name}{\" \"}\r\n              <span className=\"count-text\">\r\n                ({group.count.toString().padStart(2, \"0\")})\r\n              </span>\r\n            </h3>\r\n            <span\r\n              className={`status-circle ${getCircleClass(group.status)}`}\r\n            ></span>\r\n          </div>\r\n          {tasks\r\n            .filter((task) => task.status === group.status)\r\n            .map((task) => (\r\n              <div\r\n                key={task.id}\r\n                className={`report-card ${getStatusClass(\r\n                  task.status,\r\n                  task.overdue\r\n                )}`}\r\n              >\r\n                <div className=\"report-card-header\">\r\n                  <div className=\"header-left\">\r\n                    <h4 className=\"body_1\">{task.title}</h4>\r\n                    <div className=\"task-meta\">\r\n                      {task.status === \"done\" && (\r\n                        <span className=\"completed-label\">Completed </span>\r\n                      )}\r\n                      {task.status === \"in-progress\" && (\r\n                        <span className=\"completion-percentage\">\r\n                          {getCompletionPercentage(task)} Complete\r\n                        </span>\r\n                      )}\r\n                      {task.date}\r\n                      <span className=\"date-time-space\"></span>\r\n                      {(task.status === \"to-do\" ||\r\n                        task.status === \"in-progress\") &&\r\n                        task.time && (\r\n                          <span className=\"time-with-clock\">\r\n                            <FontAwesomeIcon\r\n                              icon={faClock}\r\n                              className=\"clock-icon\"\r\n                            />\r\n                            {task.time}\r\n                          </span>\r\n                        )}\r\n                      {task.status === \"done\" && task.time && (\r\n                        <span>{task.time}</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"task-tags\">\r\n                  {task.tags.map((tag) => (\r\n                    <span key={tag} className={`tag ${tag.toLowerCase()}`}>\r\n                      {tag}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                <div className=\"task-info\">\r\n                  <img src={task.avatar} alt=\"avatar\" className=\"task-avatar\" />\r\n                  <div className=\"task-actions body_2\">\r\n                    <span\r\n                      className=\"task-action-item\"\r\n                      onClick={() => handleTaskClick(task.id)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.length : 0} <FontAwesomeIcon icon={faClipboard} />\r\n                    </span>\r\n                    <span className=\"task-action-item\">\r\n                      {task.comments} <FontAwesomeIcon icon={faComment} />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                {openTaskId === task.id && (\r\n                  <>\r\n                    <div className=\"divider active\"></div>\r\n                    <div className=\"task-subtasks active\">\r\n                      {task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? (\r\n                        task.subTasks.map((subTask, index) => (\r\n                          <div key={subTask.id}>\r\n                            <div className=\"subtask\">\r\n                              <span className=\"subtask-icon\">\r\n                                <span></span>\r\n                                <div></div>\r\n                              </span>\r\n                              <span className=\"subtask-count\">{index + 1}.</span>\r\n                              <span className=\"subtask-text\">{subTask.text}</span>\r\n                              <span\r\n                                className={`subtask-status ${\r\n                                  subTask.completed ? \"completed\" : \"\"\r\n                                }`}\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  toggleSubTask(task.id, subTask.id);\r\n                                }}\r\n                              >\r\n                                <FontAwesomeIcon\r\n                                  icon={\r\n                                    subTask.completed ? fasCheckCircle : farCircle\r\n                                  }\r\n                                />\r\n                              </span>\r\n                            </div>\r\n                            {index !== task.subTasks.length - 1 && (\r\n                              <div className=\"divider active\"></div>\r\n                            )}\r\n                          </div>\r\n                        ))\r\n                      ) : (\r\n                        <p>No subtasks available.</p>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}