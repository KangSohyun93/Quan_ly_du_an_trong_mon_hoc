{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nconst fetchGroupsByUserId = async userId => {\n  try {\n    const response = await fetch(`${API_URL}/groups?user_id=${userId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      console.warn('Dữ liệu trả về từ API không phải là mảng:', data);\n      return [];\n    }\n    return data;\n  } catch (error) {\n    console.error('Error in fetchGroupsByUserId:', error.message);\n    throw error;\n  }\n};\nconst fetchGroupsByInstructorId = async instructorId => {\n  try {\n    const response = await fetch(`${API_URL}/groups/instructor?instructor_id=${instructorId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      console.warn('Dữ liệu trả về từ API không phải là mảng:', data);\n      return [];\n    }\n    return data;\n  } catch (error) {\n    console.error('Error in fetchGroupsByInstructorId:', error.message);\n    throw error;\n  }\n};\nconst fetchProjectByClassId = async (userId, classId) => {\n  try {\n    const response = await fetch(`${API_URL}/groups/by-class?class_id=${classId}&user_id=${userId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in fetchProjectByClassId:', error.message);\n    throw error;\n  }\n};\nconst fetchProjectById = async projectId => {\n  try {\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in fetchProjectById:', error.message);\n    throw error;\n  }\n};\nconst fetchTasksBySprintId = async sprintId => {\n  try {\n    const response = await fetch(`${API_URL}/groups/projects/0/sprints/${sprintId}/tasks`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in fetchTasksBySprintId:', error.message);\n    throw error;\n  }\n};\nconst fetchGroupMembers = async projectId => {\n  try {\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/members`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in fetchGroupMembers:', error.message);\n    throw error;\n  }\n};\nconst fetchPeerAssessments = async (projectId, assessorId) => {\n  try {\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/assessments/${assessorId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in fetchPeerAssessments:', error.message);\n    throw error;\n  }\n};\nconst savePeerAssessment = async (projectId, assessmentData) => {\n  try {\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/assessments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(assessmentData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in savePeerAssessment:', error.message);\n    throw error;\n  }\n};\nconst fetchMemberTaskStats = async projectId => {\n  try {\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/member-task-stats`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in fetchMemberTaskStats:', error.message);\n    throw error;\n  }\n};\nexport { fetchGroupsByUserId, fetchGroupsByInstructorId, fetchProjectByClassId, fetchProjectById, fetchTasksBySprintId, fetchGroupMembers, fetchPeerAssessments, savePeerAssessment, fetchMemberTaskStats };","map":{"version":3,"names":["API_URL","fetchGroupsByUserId","userId","response","fetch","ok","Error","status","data","json","Array","isArray","console","warn","error","message","fetchGroupsByInstructorId","instructorId","fetchProjectByClassId","classId","fetchProjectById","projectId","fetchTasksBySprintId","sprintId","fetchGroupMembers","fetchPeerAssessments","assessorId","savePeerAssessment","assessmentData","method","headers","body","JSON","stringify","fetchMemberTaskStats"],"sources":["C:/2024.2/Quan_ly_du_an_trong_mon_hoc - Copy/frontend/src/services/groupService.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api';\r\n\r\nconst fetchGroupsByUserId = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups?user_id=${userId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    if (!Array.isArray(data)) {\r\n      console.warn('Dữ liệu trả về từ API không phải là mảng:', data);\r\n      return [];\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in fetchGroupsByUserId:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchGroupsByInstructorId = async (instructorId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/instructor?instructor_id=${instructorId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    if (!Array.isArray(data)) {\r\n      console.warn('Dữ liệu trả về từ API không phải là mảng:', data);\r\n      return [];\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in fetchGroupsByInstructorId:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchProjectByClassId = async (userId, classId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/by-class?class_id=${classId}&user_id=${userId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in fetchProjectByClassId:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchProjectById = async (projectId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in fetchProjectById:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchTasksBySprintId = async (sprintId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/projects/0/sprints/${sprintId}/tasks`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in fetchTasksBySprintId:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchGroupMembers = async (projectId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/members`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in fetchGroupMembers:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchPeerAssessments = async (projectId, assessorId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/assessments/${assessorId}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in fetchPeerAssessments:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst savePeerAssessment = async (projectId, assessmentData) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/assessments`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(assessmentData),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in savePeerAssessment:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchMemberTaskStats = async (projectId) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/groups/projects/${projectId}/member-task-stats`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in fetchMemberTaskStats:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport { fetchGroupsByUserId, fetchGroupsByInstructorId, fetchProjectByClassId, fetchProjectById, fetchTasksBySprintId, fetchGroupMembers, fetchPeerAssessments, savePeerAssessment, fetchMemberTaskStats };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}