{"ast":null,"code":"var _jsxFileName = \"D:\\\\ITSS_Project\\\\frontend\\\\src\\\\components\\\\task\\\\ProjectManagerKanban.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/task/ProjectManagerKanban.js\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport \"./KanbanView.css\"; // Reuse the same CSS as KanbanView\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle as fasCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as farCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\nimport { faComment } from \"@fortawesome/free-solid-svg-icons\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"; // Add plus icon\nimport { fetchTasks, updateChecklistItem, updateTaskStatus } from \"../../services/api-client\";\nimport CreateTask from \"./CreateTask\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProjectManagerKanban = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [reportData, setReportData] = useState([]);\n  const [openTaskId, setOpenTaskId] = useState(null);\n  const [showCreateTask, setShowCreateTask] = useState(false); // State to toggle CreateTask form\n\n  console.log(\"ProjectManagerKanban rendered\"); // Debug log to confirm component is rendering\n\n  // Hàm xử lý nhấp vào icon công việc\n  const handleTaskClick = taskId => {\n    setOpenTaskId(openTaskId === taskId ? null : taskId);\n  };\n\n  // Function to update reportData based on tasks\n  const updateReportData = updatedTasks => {\n    const counts = {\n      \"to-do\": 0,\n      \"in-progress\": 0,\n      \"done\": 0\n    };\n    updatedTasks.forEach(task => {\n      counts[task.status]++;\n    });\n    setReportData([{\n      id: 1,\n      name: \"To-Do\",\n      status: \"to-do\",\n      count: counts[\"to-do\"]\n    }, {\n      id: 2,\n      name: \"In-progress\",\n      status: \"in-progress\",\n      count: counts[\"in-progress\"]\n    }, {\n      id: 3,\n      name: \"Done\",\n      status: \"done\",\n      count: counts[\"done\"]\n    }]);\n  };\n\n  // Fetch tasks từ API\n  const loadTasks = useCallback(async () => {\n    try {\n      const data = await fetchTasks();\n      console.log(\"Raw API data:\", data); // Kiểm tra dữ liệu gốc\n      const mappedTasks = data.map(task => {\n        console.log(\"Task checklists:\", task.checklists); // Kiểm tra checklists của mỗi task\n        return {\n          id: task.task_id,\n          title: task.title,\n          date: task.due_date ? new Date(task.due_date).toLocaleDateString() : \"\",\n          time: task.due_date ? new Date(task.due_date).toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n          }) : \"\",\n          tags: [\"SQL\", \"Backend\"],\n          avatar: `https://i.pravatar.cc/24?img=${task.assigned_to || task.task_id}`,\n          comments: task.comment_count || 0,\n          subTasks: task.checklists ? task.checklists.map(checklist => ({\n            id: checklist.checklist_id,\n            text: checklist.item_description,\n            completed: checklist.is_completed\n          })) : [],\n          // Gán mảng rỗng nếu checklists không tồn tại\n          status: task.status.toLowerCase().replace(\"to-do\", \"to-do\").replace(\"in-progress\", \"in-progress\").replace(\"completed\", \"done\"),\n          // Map \"Completed\" to \"done\" for UI compatibility\n          overdue: task.due_date && new Date(task.due_date) < new Date() && task.status !== \"Completed\",\n          // Update to use \"Completed\"\n          progress_percentage: task.progress_percentage || 0 // Already included\n        };\n      });\n      setTasks(mappedTasks);\n      updateReportData(mappedTasks); // Update reportData initially\n      console.log(\"Tasks state updated:\", mappedTasks); // Debug log\n      console.log(\"ReportData state updated:\", reportData); // Debug log\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  }, [reportData]); // Add reportData as a dependency since updateReportData uses it\n\n  useEffect(() => {\n    console.log(\"useEffect triggered\"); // Debug log\n    loadTasks();\n  }, [loadTasks]); // Add loadTasks to the dependency array to fix the ESLint warning\n\n  const getStatusClass = (status, overdue) => {\n    if (status === \"done\") return \"report-status-completed\";\n    if (overdue) return \"report-status-overdue\";\n    switch (status) {\n      case \"to-do\":\n        return \"report-status-to-do\";\n      case \"in-progress\":\n        return \"report-status-in-progress\";\n      default:\n        return \"\";\n    }\n  };\n  const getCircleClass = status => {\n    switch (status) {\n      case \"to-do\":\n        return \"circle-to-do\";\n      case \"in-progress\":\n        return \"circle-in-progress\";\n      case \"done\":\n        return \"circle-completed\";\n      default:\n        return \"\";\n    }\n  };\n  const toggleSubTask = async (taskId, subTaskId) => {\n    try {\n      const currentTask = tasks.find(task => task.id === taskId);\n      const currentSubTask = currentTask.subTasks.find(sub => sub.id === subTaskId);\n      console.log(\"Toggling subtask:\", {\n        taskId,\n        subTaskId,\n        currentSubTask\n      }); // Debug log\n      await updateChecklistItem(subTaskId, !currentSubTask.completed);\n\n      // Update local state for the subtask\n      let updatedTasks = tasks.map(task => task.id === taskId ? {\n        ...task,\n        subTasks: task.subTasks.map(subTask => subTask.id === subTaskId ? {\n          ...subTask,\n          completed: !subTask.completed\n        } : subTask)\n      } : task);\n\n      // Check and update task status based on subtask completion\n      const updatedTask = updatedTasks.find(task => task.id === taskId);\n      const allSubtasksCompleted = updatedTask.subTasks.every(subTask => subTask.completed);\n      const anySubtaskCompleted = updatedTask.subTasks.some(subTask => subTask.completed);\n      const subtaskCount = updatedTask.subTasks.length;\n      let newStatus = updatedTask.status;\n      if (subtaskCount === 1 && allSubtasksCompleted) {\n        newStatus = \"done\";\n      } else if (updatedTask.status === \"to-do\" && anySubtaskCompleted) {\n        newStatus = \"in-progress\";\n      } else if (allSubtasksCompleted && updatedTask.status !== \"done\") {\n        newStatus = \"done\";\n      } else if (updatedTask.status === \"done\" && !allSubtasksCompleted) {\n        if (subtaskCount > 1) {\n          newStatus = \"in-progress\";\n        } else {\n          newStatus = \"to-do\";\n        }\n      } else if (updatedTask.status === \"in-progress\" && !anySubtaskCompleted) {\n        newStatus = \"to-do\";\n      }\n\n      // Update task status in the database if it has changed\n      if (newStatus !== updatedTask.status) {\n        await updateTaskStatus(taskId, newStatus); // No need to pass progress_percentage\n        updatedTasks = updatedTasks.map(task => task.id === taskId ? {\n          ...task,\n          status: newStatus\n        } : task);\n      }\n\n      // Since progress_percentage is updated by the DB trigger, reload tasks to get the latest data\n      await loadTasks();\n      console.log(\"Subtask updated successfully, new status:\", newStatus); // Debug log\n    } catch (error) {\n      console.error(\"Error updating subtask:\", error);\n    }\n  };\n\n  // Callback function to refresh tasks after a new task is created\n  const handleTaskCreated = () => {\n    loadTasks(); // Refresh the task list\n    setShowCreateTask(false); // Hide the form after task creation\n  };\n\n  // Callback function to handle cancel action\n  const handleCancel = () => {\n    setShowCreateTask(false); // Hide the form\n  };\n\n  // Add a fallback UI in case reportData is empty\n  if (!reportData.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Kanban board...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"report-grid\",\n    children: [reportData.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"h3\",\n          children: [group.name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"count-text\",\n            children: [\"(\", group.count.toString().padStart(2, \"0\"), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-circle ${getCircleClass(group.status)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), tasks.filter(task => task.status === group.status).map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `report-card ${getStatusClass(task.status, task.overdue)}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"report-card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"body_1\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-meta\",\n              children: [task.status === \"done\" && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"completed-label\",\n                children: \"Completed \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 25\n              }, this), task.date, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"date-time-space\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 23\n              }, this), (task.status === \"to-do\" || task.status === \"in-progress\") && task.time && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-with-clock\",\n                children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faClock,\n                  className: \"clock-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 29\n                }, this), task.time]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 27\n              }, this), task.status === \"done\" && task.time && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"progress-text\",\n                children: [\" \", \"- Progress: \", task.progress_percentage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-tags\",\n          children: task.tags.map(tag => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `tag ${tag.toLowerCase()}`,\n            children: tag\n          }, tag, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: task.avatar,\n            alt: \"avatar\",\n            className: \"task-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-actions body_2\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-action-item\",\n              onClick: () => handleTaskClick(task.id),\n              style: {\n                cursor: \"pointer\"\n              },\n              children: [task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.length : 0, \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faClipboard\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 140\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-action-item\",\n              children: [task.comments, \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faComment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 17\n        }, this), openTaskId === task.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"divider active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-subtasks active\",\n            children: task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.map((subTask, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"subtask\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-icon\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 291,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-count\",\n                  children: [index + 1, \".\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"subtask-text\",\n                  children: subTask.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 31\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `subtask-status ${subTask.completed ? \"completed\" : \"\"}`,\n                  onClick: e => {\n                    e.stopPropagation();\n                    toggleSubTask(task.id, subTask.id);\n                  },\n                  children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: subTask.completed ? fasCheckCircle : farCircle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 31\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 29\n              }, this), index !== task.subTasks.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"divider active\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 31\n              }, this)]\n            }, subTask.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 27\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No subtasks available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }, this)), group.status === \"to-do\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-task-btn-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowCreateTask(!showCreateTask),\n          className: \"add-task-btn\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPlus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this), \" Add Task\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }, this)]\n    }, group.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)), showCreateTask && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: /*#__PURE__*/_jsxDEV(CreateTask, {\n          onTaskCreated: handleTaskCreated,\n          onCancel: handleCancel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectManagerKanban, \"e6rjIz5XE2lgrbcxRN5N0LKq4uk=\");\n_c = ProjectManagerKanban;\nexport default ProjectManagerKanban;\nvar _c;\n$RefreshReg$(_c, \"ProjectManagerKanban\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","FontAwesomeIcon","faCheckCircle","fasCheckCircle","faCircle","farCircle","faClipboard","faComment","faClock","faPlus","fetchTasks","updateChecklistItem","updateTaskStatus","CreateTask","jsxDEV","_jsxDEV","Fragment","_Fragment","ProjectManagerKanban","_s","tasks","setTasks","reportData","setReportData","openTaskId","setOpenTaskId","showCreateTask","setShowCreateTask","console","log","handleTaskClick","taskId","updateReportData","updatedTasks","counts","forEach","task","status","id","name","count","loadTasks","data","mappedTasks","map","checklists","task_id","title","date","due_date","Date","toLocaleDateString","time","toLocaleTimeString","hour","minute","tags","avatar","assigned_to","comments","comment_count","subTasks","checklist","checklist_id","text","item_description","completed","is_completed","toLowerCase","replace","overdue","progress_percentage","error","getStatusClass","getCircleClass","toggleSubTask","subTaskId","currentTask","find","currentSubTask","sub","subTask","updatedTask","allSubtasksCompleted","every","anySubtaskCompleted","some","subtaskCount","length","newStatus","handleTaskCreated","handleCancel","children","fileName","_jsxFileName","lineNumber","columnNumber","className","group","toString","padStart","filter","icon","tag","src","alt","onClick","style","cursor","index","e","stopPropagation","onTaskCreated","onCancel","_c","$RefreshReg$"],"sources":["D:/ITSS_Project/frontend/src/components/task/ProjectManagerKanban.js"],"sourcesContent":["// frontend/src/components/task/ProjectManagerKanban.js\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport \"./KanbanView.css\"; // Reuse the same CSS as KanbanView\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle as fasCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCircle as farCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faComment } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"; // Add plus icon\r\nimport { fetchTasks, updateChecklistItem, updateTaskStatus } from \"../../services/api-client\";\r\nimport CreateTask from \"./CreateTask\";\r\n\r\nexport const ProjectManagerKanban = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [reportData, setReportData] = useState([]);\r\n  const [openTaskId, setOpenTaskId] = useState(null);\r\n  const [showCreateTask, setShowCreateTask] = useState(false); // State to toggle CreateTask form\r\n\r\n  console.log(\"ProjectManagerKanban rendered\"); // Debug log to confirm component is rendering\r\n\r\n  // Hàm xử lý nhấp vào icon công việc\r\n  const handleTaskClick = (taskId) => {\r\n    setOpenTaskId(openTaskId === taskId ? null : taskId);\r\n  };\r\n\r\n  // Function to update reportData based on tasks\r\n  const updateReportData = (updatedTasks) => {\r\n    const counts = { \"to-do\": 0, \"in-progress\": 0, \"done\": 0 };\r\n    updatedTasks.forEach((task) => {\r\n      counts[task.status]++;\r\n    });\r\n\r\n    setReportData([\r\n      { id: 1, name: \"To-Do\", status: \"to-do\", count: counts[\"to-do\"] },\r\n      {\r\n        id: 2,\r\n        name: \"In-progress\",\r\n        status: \"in-progress\",\r\n        count: counts[\"in-progress\"],\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Done\", status: \"done\", count: counts[\"done\"] },\r\n    ]);\r\n  };\r\n\r\n  // Fetch tasks từ API\r\n  const loadTasks = useCallback(async () => {\r\n    try {\r\n      const data = await fetchTasks();\r\n      console.log(\"Raw API data:\", data); // Kiểm tra dữ liệu gốc\r\n      const mappedTasks = data.map((task) => {\r\n        console.log(\"Task checklists:\", task.checklists); // Kiểm tra checklists của mỗi task\r\n        return {\r\n          id: task.task_id,\r\n          title: task.title,\r\n          date: task.due_date ? new Date(task.due_date).toLocaleDateString() : \"\",\r\n          time: task.due_date\r\n            ? new Date(task.due_date).toLocaleTimeString([], {\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n              })\r\n            : \"\",\r\n          tags: [\"SQL\", \"Backend\"],\r\n          avatar: `https://i.pravatar.cc/24?img=${task.assigned_to || task.task_id}`,\r\n          comments: task.comment_count || 0,\r\n          subTasks: task.checklists\r\n            ? task.checklists.map((checklist) => ({\r\n                id: checklist.checklist_id,\r\n                text: checklist.item_description,\r\n                completed: checklist.is_completed,\r\n              }))\r\n            : [], // Gán mảng rỗng nếu checklists không tồn tại\r\n          status: task.status\r\n            .toLowerCase()\r\n            .replace(\"to-do\", \"to-do\")\r\n            .replace(\"in-progress\", \"in-progress\")\r\n            .replace(\"completed\", \"done\"), // Map \"Completed\" to \"done\" for UI compatibility\r\n          overdue:\r\n            task.due_date &&\r\n            new Date(task.due_date) < new Date() &&\r\n            task.status !== \"Completed\", // Update to use \"Completed\"\r\n          progress_percentage: task.progress_percentage || 0, // Already included\r\n        };\r\n      });\r\n\r\n      setTasks(mappedTasks);\r\n      updateReportData(mappedTasks); // Update reportData initially\r\n      console.log(\"Tasks state updated:\", mappedTasks); // Debug log\r\n      console.log(\"ReportData state updated:\", reportData); // Debug log\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error);\r\n    }\r\n  }, [reportData]); // Add reportData as a dependency since updateReportData uses it\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect triggered\"); // Debug log\r\n    loadTasks();\r\n  }, [loadTasks]); // Add loadTasks to the dependency array to fix the ESLint warning\r\n\r\n  const getStatusClass = (status, overdue) => {\r\n    if (status === \"done\") return \"report-status-completed\";\r\n    if (overdue) return \"report-status-overdue\";\r\n    switch (status) {\r\n      case \"to-do\":\r\n        return \"report-status-to-do\";\r\n      case \"in-progress\":\r\n        return \"report-status-in-progress\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getCircleClass = (status) => {\r\n    switch (status) {\r\n      case \"to-do\":\r\n        return \"circle-to-do\";\r\n      case \"in-progress\":\r\n        return \"circle-in-progress\";\r\n      case \"done\":\r\n        return \"circle-completed\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const toggleSubTask = async (taskId, subTaskId) => {\r\n    try {\r\n      const currentTask = tasks.find((task) => task.id === taskId);\r\n      const currentSubTask = currentTask.subTasks.find((sub) => sub.id === subTaskId);\r\n      console.log(\"Toggling subtask:\", { taskId, subTaskId, currentSubTask }); // Debug log\r\n      await updateChecklistItem(subTaskId, !currentSubTask.completed);\r\n\r\n      // Update local state for the subtask\r\n      let updatedTasks = tasks.map((task) =>\r\n        task.id === taskId\r\n          ? {\r\n              ...task,\r\n              subTasks: task.subTasks.map((subTask) =>\r\n                subTask.id === subTaskId\r\n                  ? { ...subTask, completed: !subTask.completed }\r\n                  : subTask\r\n              ),\r\n            }\r\n          : task\r\n      );\r\n\r\n      // Check and update task status based on subtask completion\r\n      const updatedTask = updatedTasks.find((task) => task.id === taskId);\r\n      const allSubtasksCompleted = updatedTask.subTasks.every((subTask) => subTask.completed);\r\n      const anySubtaskCompleted = updatedTask.subTasks.some((subTask) => subTask.completed);\r\n      const subtaskCount = updatedTask.subTasks.length;\r\n      let newStatus = updatedTask.status;\r\n\r\n      if (subtaskCount === 1 && allSubtasksCompleted) {\r\n        newStatus = \"done\";\r\n      } else if (updatedTask.status === \"to-do\" && anySubtaskCompleted) {\r\n        newStatus = \"in-progress\";\r\n      } else if (allSubtasksCompleted && updatedTask.status !== \"done\") {\r\n        newStatus = \"done\";\r\n      } else if (updatedTask.status === \"done\" && !allSubtasksCompleted) {\r\n        if (subtaskCount > 1) {\r\n          newStatus = \"in-progress\";\r\n        } else {\r\n          newStatus = \"to-do\";\r\n        }\r\n      } else if (updatedTask.status === \"in-progress\" && !anySubtaskCompleted) {\r\n        newStatus = \"to-do\";\r\n      }\r\n\r\n      // Update task status in the database if it has changed\r\n      if (newStatus !== updatedTask.status) {\r\n        await updateTaskStatus(taskId, newStatus); // No need to pass progress_percentage\r\n        updatedTasks = updatedTasks.map((task) =>\r\n          task.id === taskId ? { ...task, status: newStatus } : task\r\n        );\r\n      }\r\n\r\n      // Since progress_percentage is updated by the DB trigger, reload tasks to get the latest data\r\n      await loadTasks();\r\n\r\n      console.log(\"Subtask updated successfully, new status:\", newStatus); // Debug log\r\n    } catch (error) {\r\n      console.error(\"Error updating subtask:\", error);\r\n    }\r\n  };\r\n\r\n  // Callback function to refresh tasks after a new task is created\r\n  const handleTaskCreated = () => {\r\n    loadTasks(); // Refresh the task list\r\n    setShowCreateTask(false); // Hide the form after task creation\r\n  };\r\n\r\n  // Callback function to handle cancel action\r\n  const handleCancel = () => {\r\n    setShowCreateTask(false); // Hide the form\r\n  };\r\n\r\n  // Add a fallback UI in case reportData is empty\r\n  if (!reportData.length) {\r\n    return <div>Loading Kanban board...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"report-grid\">\r\n      {reportData.map((group) => (\r\n        <div key={group.id} className=\"status-block\">\r\n          <div className=\"column-header\">\r\n            <h3 className=\"h3\">\r\n              {group.name}{\" \"}\r\n              <span className=\"count-text\">\r\n                ({group.count.toString().padStart(2, \"0\")})\r\n              </span>\r\n            </h3>\r\n            <span\r\n              className={`status-circle ${getCircleClass(group.status)}`}\r\n            ></span>\r\n          </div>\r\n          {tasks\r\n            .filter((task) => task.status === group.status)\r\n            .map((task) => (\r\n              <div\r\n                key={task.id}\r\n                className={`report-card ${getStatusClass(\r\n                  task.status,\r\n                  task.overdue\r\n                )}`}\r\n              >\r\n                <div className=\"report-card-header\">\r\n                  <div className=\"header-left\">\r\n                    <h4 className=\"body_1\">{task.title}</h4>\r\n                    <div className=\"task-meta\">\r\n                      {task.status === \"done\" && (\r\n                        <span className=\"completed-label\">Completed </span>\r\n                      )}\r\n                      {task.date}\r\n                      <span className=\"date-time-space\"></span>\r\n                      {(task.status === \"to-do\" ||\r\n                        task.status === \"in-progress\") &&\r\n                        task.time && (\r\n                          <span className=\"time-with-clock\">\r\n                            <FontAwesomeIcon\r\n                              icon={faClock}\r\n                              className=\"clock-icon\"\r\n                            />\r\n                            {task.time}\r\n                          </span>\r\n                        )}\r\n                      {task.status === \"done\" && task.time && (\r\n                        <span>{task.time}</span>\r\n                      )}\r\n                      <span className=\"progress-text\">\r\n                        {\" \"}\r\n                        - Progress: {task.progress_percentage}%\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"task-tags\">\r\n                  {task.tags.map((tag) => (\r\n                    <span key={tag} className={`tag ${tag.toLowerCase()}`}>\r\n                      {tag}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                <div className=\"task-info\">\r\n                  <img src={task.avatar} alt=\"avatar\" className=\"task-avatar\" />\r\n                  <div className=\"task-actions body_2\">\r\n                    <span\r\n                      className=\"task-action-item\"\r\n                      onClick={() => handleTaskClick(task.id)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? task.subTasks.length : 0} <FontAwesomeIcon icon={faClipboard} />\r\n                    </span>\r\n                    <span className=\"task-action-item\">\r\n                      {task.comments} <FontAwesomeIcon icon={faComment} />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                {openTaskId === task.id && (\r\n                  <>\r\n                    <div className=\"divider active\"></div>\r\n                    <div className=\"task-subtasks active\">\r\n                      {task.subTasks && task.subTasks.length > 0 && task.subTasks.every(subTask => subTask.id) ? (\r\n                        task.subTasks.map((subTask, index) => (\r\n                          <div key={subTask.id}>\r\n                            <div className=\"subtask\">\r\n                              <span className=\"subtask-icon\">\r\n                                <span></span>\r\n                                <div></div>\r\n                              </span>\r\n                              <span className=\"subtask-count\">{index + 1}.</span>\r\n                              <span className=\"subtask-text\">{subTask.text}</span>\r\n                              <span\r\n                                className={`subtask-status ${\r\n                                  subTask.completed ? \"completed\" : \"\"\r\n                                }`}\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  toggleSubTask(task.id, subTask.id);\r\n                                }}\r\n                              >\r\n                                <FontAwesomeIcon\r\n                                  icon={\r\n                                    subTask.completed ? fasCheckCircle : farCircle\r\n                                  }\r\n                                />\r\n                              </span>\r\n                            </div>\r\n                            {index !== task.subTasks.length - 1 && (\r\n                              <div className=\"divider active\"></div>\r\n                            )}\r\n                          </div>\r\n                        ))\r\n                      ) : (\r\n                        <p>No subtasks available.</p>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n          {/* Add the \"+\" button at the bottom of the \"To-Do\" column */}\r\n          {group.status === \"to-do\" && (\r\n            <div className=\"add-task-btn-container\">\r\n              <button\r\n                onClick={() => setShowCreateTask(!showCreateTask)}\r\n                className=\"add-task-btn\"\r\n              >\r\n                <FontAwesomeIcon icon={faPlus} /> Add Task\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n      {/* Render CreateTask form in a modal when showCreateTask is true */}\r\n      {showCreateTask && (\r\n        <div className=\"modal-backdrop\">\r\n          <div className=\"modal-content\">\r\n            <CreateTask onTaskCreated={handleTaskCreated} onCancel={handleCancel} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectManagerKanban;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}