{"ast":null,"code":"const pool = require('../../../config/db');\nconst getGroupsByInstructorId = async instructorId => {\n  try {\n    console.log(`Bắt đầu truy vấn nhóm cho instructorId: ${instructorId}`);\n\n    // Truy vấn chính: Lấy thông tin duy nhất của mỗi lớp và tổng hợp dữ liệu nhóm/thành viên\n    const [rows] = await pool.query(`\n      SELECT \n        c.class_id AS classId,\n        c.class_name AS className,\n        c.semester,\n        (SELECT COUNT(DISTINCT g.group_id) \n         FROM Groups g \n         WHERE g.class_id = c.class_id) AS groupCount,\n        (SELECT COUNT(DISTINCT cm.user_id) \n         FROM ClassMembers cm\n         WHERE cm.class_id = c.class_id) AS studentCount\n      FROM Classes c\n      WHERE c.instructor_id = ?;\n      `, [instructorId]);\n    console.log('Dữ liệu lớp thô từ truy vấn chính:', rows);\n\n    // Nếu không có lớp nào, trả về mảng rỗng\n    if (!rows || rows.length === 0) {\n      console.log('Không tìm thấy lớp nào cho instructorId:', instructorId);\n      return [];\n    }\n\n    // Tổng hợp tất cả thành viên từ ClassMembers trong cùng classId\n    const groupsWithMembers = await Promise.all(rows.map(async row => {\n      if (!row.classId) {\n        return {\n          ...row,\n          members: [],\n          avatar: '/uploads/default.jpg'\n        };\n      }\n\n      // Lấy tất cả thành viên từ ClassMembers trong cùng classId\n      const [allMemberRows] = await pool.query(`\n          SELECT DISTINCT u.user_id, u.avatar\n          FROM ClassMembers cm\n          JOIN Users u ON cm.user_id = u.user_id\n          WHERE cm.class_id = ?;\n          `, [row.classId]);\n      console.log(`Tất cả thành viên của classId ${row.classId}:`, allMemberRows);\n      const members = allMemberRows.map(member => ({\n        user_id: member.user_id,\n        avatar: member.avatar || '/uploads/default.jpg'\n      }));\n      return {\n        ...row,\n        members: members,\n        avatar: members.length > 0 ? members[0].avatar : '/uploads/default.jpg'\n      };\n    }));\n    console.log('Dữ liệu lớp cuối cùng:', groupsWithMembers);\n    return groupsWithMembers;\n  } catch (error) {\n    console.error('Lỗi trong getGroupsByInstructorId:', error.message, error.stack);\n    throw new Error('Lỗi khi lấy danh sách nhóm');\n  }\n};\nmodule.exports = {\n  getGroupsByInstructorId\n};","map":{"version":3,"names":["pool","require","getGroupsByInstructorId","instructorId","console","log","rows","query","length","groupsWithMembers","Promise","all","map","row","classId","members","avatar","allMemberRows","member","user_id","error","message","stack","Error","module","exports"],"sources":["C:/2024.2/Quan_ly_du_an_trong_mon_hoc/frontend/src/services/instructorGroupService.js"],"sourcesContent":["const pool = require('../../../config/db');\r\n\r\nconst getGroupsByInstructorId = async (instructorId) => {\r\n  try {\r\n    console.log(`Bắt đầu truy vấn nhóm cho instructorId: ${instructorId}`);\r\n\r\n    // Truy vấn chính: Lấy thông tin duy nhất của mỗi lớp và tổng hợp dữ liệu nhóm/thành viên\r\n    const [rows] = await pool.query(\r\n      `\r\n      SELECT \r\n        c.class_id AS classId,\r\n        c.class_name AS className,\r\n        c.semester,\r\n        (SELECT COUNT(DISTINCT g.group_id) \r\n         FROM Groups g \r\n         WHERE g.class_id = c.class_id) AS groupCount,\r\n        (SELECT COUNT(DISTINCT cm.user_id) \r\n         FROM ClassMembers cm\r\n         WHERE cm.class_id = c.class_id) AS studentCount\r\n      FROM Classes c\r\n      WHERE c.instructor_id = ?;\r\n      `,\r\n      [instructorId]\r\n    );\r\n\r\n    console.log('Dữ liệu lớp thô từ truy vấn chính:', rows);\r\n\r\n    // Nếu không có lớp nào, trả về mảng rỗng\r\n    if (!rows || rows.length === 0) {\r\n      console.log('Không tìm thấy lớp nào cho instructorId:', instructorId);\r\n      return [];\r\n    }\r\n\r\n    // Tổng hợp tất cả thành viên từ ClassMembers trong cùng classId\r\n    const groupsWithMembers = await Promise.all(\r\n      rows.map(async (row) => {\r\n        if (!row.classId) {\r\n          return {\r\n            ...row,\r\n            members: [],\r\n            avatar: '/uploads/default.jpg'\r\n          };\r\n        }\r\n\r\n        // Lấy tất cả thành viên từ ClassMembers trong cùng classId\r\n        const [allMemberRows] = await pool.query(\r\n          `\r\n          SELECT DISTINCT u.user_id, u.avatar\r\n          FROM ClassMembers cm\r\n          JOIN Users u ON cm.user_id = u.user_id\r\n          WHERE cm.class_id = ?;\r\n          `,\r\n          [row.classId]\r\n        );\r\n\r\n        console.log(`Tất cả thành viên của classId ${row.classId}:`, allMemberRows);\r\n\r\n        const members = allMemberRows.map(member => ({\r\n          user_id: member.user_id,\r\n          avatar: member.avatar || '/uploads/default.jpg'\r\n        }));\r\n        return {\r\n          ...row,\r\n          members: members,\r\n          avatar: (members.length > 0 ? members[0].avatar : '/uploads/default.jpg')\r\n        };\r\n      })\r\n    );\r\n\r\n    console.log('Dữ liệu lớp cuối cùng:', groupsWithMembers);\r\n    return groupsWithMembers;\r\n  } catch (error) {\r\n    console.error('Lỗi trong getGroupsByInstructorId:', error.message, error.stack);\r\n    throw new Error('Lỗi khi lấy danh sách nhóm');\r\n  }\r\n};\r\n\r\nmodule.exports = { getGroupsByInstructorId };"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAE1C,MAAMC,uBAAuB,GAAG,MAAOC,YAAY,IAAK;EACtD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,2CAA2CF,YAAY,EAAE,CAAC;;IAEtE;IACA,MAAM,CAACG,IAAI,CAAC,GAAG,MAAMN,IAAI,CAACO,KAAK,CAC7B;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,EACD,CAACJ,YAAY,CACf,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEC,IAAI,CAAC;;IAEvD;IACA,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MAC9BJ,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEF,YAAY,CAAC;MACrE,OAAO,EAAE;IACX;;IAEA;IACA,MAAMM,iBAAiB,GAAG,MAAMC,OAAO,CAACC,GAAG,CACzCL,IAAI,CAACM,GAAG,CAAC,MAAOC,GAAG,IAAK;MACtB,IAAI,CAACA,GAAG,CAACC,OAAO,EAAE;QAChB,OAAO;UACL,GAAGD,GAAG;UACNE,OAAO,EAAE,EAAE;UACXC,MAAM,EAAE;QACV,CAAC;MACH;;MAEA;MACA,MAAM,CAACC,aAAa,CAAC,GAAG,MAAMjB,IAAI,CAACO,KAAK,CACtC;AACV;AACA;AACA;AACA;AACA,WAAW,EACD,CAACM,GAAG,CAACC,OAAO,CACd,CAAC;MAEDV,OAAO,CAACC,GAAG,CAAC,iCAAiCQ,GAAG,CAACC,OAAO,GAAG,EAAEG,aAAa,CAAC;MAE3E,MAAMF,OAAO,GAAGE,aAAa,CAACL,GAAG,CAACM,MAAM,KAAK;QAC3CC,OAAO,EAAED,MAAM,CAACC,OAAO;QACvBH,MAAM,EAAEE,MAAM,CAACF,MAAM,IAAI;MAC3B,CAAC,CAAC,CAAC;MACH,OAAO;QACL,GAAGH,GAAG;QACNE,OAAO,EAAEA,OAAO;QAChBC,MAAM,EAAGD,OAAO,CAACP,MAAM,GAAG,CAAC,GAAGO,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,GAAG;MACpD,CAAC;IACH,CAAC,CACH,CAAC;IAEDZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEI,iBAAiB,CAAC;IACxD,OAAOA,iBAAiB;EAC1B,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACC,OAAO,EAAED,KAAK,CAACE,KAAK,CAAC;IAC/E,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EAAEvB;AAAwB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}