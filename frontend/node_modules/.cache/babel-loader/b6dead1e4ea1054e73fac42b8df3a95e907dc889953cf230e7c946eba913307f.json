{"ast":null,"code":"// frontend/src/services/api-client.js\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch tasks\");\n  }\n  const data = await response.json();\n  return data.map(task => ({\n    task_id: task.task_id,\n    title: task.title,\n    due_date: task.due_date,\n    status: task.status,\n    checklists: task.checklists,\n    comment_count: task.comment_count,\n    progress_percentage: parseInt(task.progress_percentage) || 0,\n    assigned_to: task.assigned_to || task.task_id\n  }));\n};\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\n  const response = await fetch(`${API_BASE_URL}/api/task-checklists/${checklistId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      is_completed: isCompleted\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update checklist item\");\n  }\n  return response.json();\n};\nexport const updateTaskStatus = async (taskId, status) => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/status`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      status: status === \"to-do\" ? \"To-Do\" : status === \"in-progress\" ? \"In-Progress\" : \"Completed\"\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update task status\");\n  }\n  return response.json();\n};\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch projects\");\n  }\n  return response.json();\n};\nexport const fetchSprints = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/sprints`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch sprints\");\n  }\n  return response.json();\n};\nexport const createTask = async taskData => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      ...taskData,\n      status: taskData.status === \"to-do\" ? \"To-Do\" : taskData.status === \"in-progress\" ? \"In-Progress\" : \"To-Do\" // Default to To-Do\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to create task\");\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchTasks","response","fetch","method","headers","ok","Error","data","json","map","task","task_id","title","due_date","status","checklists","comment_count","progress_percentage","parseInt","assigned_to","updateChecklistItem","checklistId","isCompleted","body","JSON","stringify","is_completed","updateTaskStatus","taskId","fetchProjects","fetchSprints","createTask","taskData"],"sources":["D:/ITSS_Project/frontend/src/services/api-client.js"],"sourcesContent":["// frontend/src/services/api-client.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\r\n\r\nexport const fetchTasks = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch tasks\");\r\n  }\r\n  const data = await response.json();\r\n  return data.map((task) => ({\r\n    task_id: task.task_id,\r\n    title: task.title,\r\n    due_date: task.due_date,\r\n    status: task.status,\r\n    checklists: task.checklists,\r\n    comment_count: task.comment_count,\r\n    progress_percentage: parseInt(task.progress_percentage) || 0,\r\n    assigned_to: task.assigned_to || task.task_id,\r\n  }));\r\n};\r\n\r\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/task-checklists/${checklistId}`, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ is_completed: isCompleted }),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to update checklist item\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const updateTaskStatus = async (taskId, status) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/status`, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      status: status === \"to-do\" ? \"To-Do\" : status === \"in-progress\" ? \"In-Progress\" : \"Completed\",\r\n    }),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to update task status\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchProjects = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch projects\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchSprints = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/sprints`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch sprints\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const createTask = async (taskData) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      ...taskData,\r\n      status: taskData.status === \"to-do\" ? \"To-Do\" : taskData.status === \"in-progress\" ? \"In-Progress\" : \"To-Do\", // Default to To-Do\r\n    }),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to create task\");\r\n  }\r\n  return response.json();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}