{"ast":null,"code":"// frontend/src/services/api-client.js\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\"; // Adjust based on your backend URL\n\nexport const fetchTasks = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed (e.g., JWT token)\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch tasks\");\n  }\n  return response.json();\n};\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\n  const response = await fetch(`${API_BASE_URL}/api/task-checklists/${checklistId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed\n    },\n    body: JSON.stringify({\n      is_completed: isCompleted\n    }) // Sending boolean\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update checklist item\");\n  }\n  return response.json();\n};\nexport const updateTaskStatus = async (taskId, status) => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/status`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed\n    },\n    body: JSON.stringify({\n      status: status.toUpperCase()\n    }) // Convert to uppercase for backend (To-Do, In-Progress, Done)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update task status\");\n  }\n  return response.json();\n};\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch projects\");\n  }\n  return response.json();\n};\nexport const createTask = async taskData => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed\n    },\n    body: JSON.stringify(taskData)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to create task\");\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchTasks","response","fetch","method","headers","ok","Error","json","updateChecklistItem","checklistId","isCompleted","body","JSON","stringify","is_completed","updateTaskStatus","taskId","status","toUpperCase","fetchProjects","createTask","taskData"],"sources":["D:/ITSS_Project/frontend/src/services/api-client.js"],"sourcesContent":["// frontend/src/services/api-client.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\"; // Adjust based on your backend URL\r\n\r\nexport const fetchTasks = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed (e.g., JWT token)\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch tasks\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/task-checklists/${checklistId}`, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed\r\n    },\r\n    body: JSON.stringify({ is_completed: isCompleted }), // Sending boolean\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to update checklist item\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const updateTaskStatus = async (taskId, status) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks/${taskId}/status`, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed\r\n    },\r\n    body: JSON.stringify({ status: status.toUpperCase() }), // Convert to uppercase for backend (To-Do, In-Progress, Done)\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to update task status\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchProjects = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch projects\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const createTask = async (taskData) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed\r\n    },\r\n    body: JSON.stringify(taskData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to create task\");\r\n  }\r\n  return response.json();\r\n};"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB,CAAC,CAAC;;AAEpF,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,YAAY,EAAE;IACxDO,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF;EACF,CAAC,CAAC;EACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,WAAW,KAAK;EACrE,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,wBAAwBa,WAAW,EAAE,EAAE;IACjFN,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF,CAAC;IACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,YAAY,EAAEJ;IAAY,CAAC,CAAC,CAAE;EACvD,CAAC,CAAC;EACF,IAAI,CAACT,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpD;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,MAAM,KAAK;EACxD,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,cAAcoB,MAAM,SAAS,EAAE;IACzEb,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF,CAAC;IACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEI,MAAM,EAAEA,MAAM,CAACC,WAAW,CAAC;IAAE,CAAC,CAAC,CAAE;EAC1D,CAAC,CAAC;EACF,IAAI,CAACjB,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,eAAe,EAAE;IAC3DO,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF;EACF,CAAC,CAAC;EACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMa,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,YAAY,EAAE;IACxDO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF,CAAC;IACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACQ,QAAQ;EAC/B,CAAC,CAAC;EACF,IAAI,CAACpB,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}