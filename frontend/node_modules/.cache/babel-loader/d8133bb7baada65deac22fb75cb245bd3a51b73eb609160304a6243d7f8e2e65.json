{"ast":null,"code":"// frontend/src/services/api-client.js\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\"; // Adjust based on your backend URL\n\n// frontend/src/services/api-client.js\nexport const fetchTasks = async () => {\n  try {\n    const response = await fetch(\"/api/tasks\");\n    if (!response.ok) throw new Error(\"Failed to fetch tasks\");\n    const data = await response.json();\n    return data.map(task => ({\n      task_id: task.task_id,\n      title: task.title,\n      due_date: task.due_date,\n      status: task.status,\n      checklists: task.checklists,\n      comment_count: task.comment_count,\n      assigned_to: task.assigned_to,\n      progress_percentage: task.progress_percentage // Add this line\n    }));\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    return [];\n  }\n};\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\n  const response = await fetch(`${API_BASE_URL}/api/task-checklists/${checklistId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed\n    },\n    body: JSON.stringify({\n      is_completed: isCompleted\n    }) // Sending boolean\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update checklist item\");\n  }\n  return response.json();\n};\n\n// frontend/src/services/api-client.js\nexport const updateTaskStatus = async (taskId, status, progressPercentage = null) => {\n  try {\n    const response = await fetch(`/api/tasks/${taskId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        status,\n        progress_percentage: progressPercentage\n      })\n    });\n    if (!response.ok) throw new Error(\"Failed to update task status\");\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating task status:\", error);\n    throw error;\n  }\n};\nexport const fetchProjects = async () => {\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch projects\");\n  }\n  return response.json();\n};\nexport const createTask = async taskData => {\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // Add authentication headers if needed\n    },\n    body: JSON.stringify(taskData)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to create task\");\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchTasks","response","fetch","ok","Error","data","json","map","task","task_id","title","due_date","status","checklists","comment_count","assigned_to","progress_percentage","error","console","updateChecklistItem","checklistId","isCompleted","method","headers","body","JSON","stringify","is_completed","updateTaskStatus","taskId","progressPercentage","fetchProjects","createTask","taskData"],"sources":["D:/ITSS_Project/frontend/src/services/api-client.js"],"sourcesContent":["// frontend/src/services/api-client.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\"; // Adjust based on your backend URL\r\n\r\n// frontend/src/services/api-client.js\r\nexport const fetchTasks = async () => {\r\n  try {\r\n    const response = await fetch(\"/api/tasks\");\r\n    if (!response.ok) throw new Error(\"Failed to fetch tasks\");\r\n    const data = await response.json();\r\n    return data.map((task) => ({\r\n      task_id: task.task_id,\r\n      title: task.title,\r\n      due_date: task.due_date,\r\n      status: task.status,\r\n      checklists: task.checklists,\r\n      comment_count: task.comment_count,\r\n      assigned_to: task.assigned_to,\r\n      progress_percentage: task.progress_percentage, // Add this line\r\n    }));\r\n  } catch (error) {\r\n    console.error(\"Error fetching tasks:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const updateChecklistItem = async (checklistId, isCompleted) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/task-checklists/${checklistId}`, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed\r\n    },\r\n    body: JSON.stringify({ is_completed: isCompleted }), // Sending boolean\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to update checklist item\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// frontend/src/services/api-client.js\r\nexport const updateTaskStatus = async (taskId, status, progressPercentage = null) => {\r\n  try {\r\n    const response = await fetch(`/api/tasks/${taskId}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ status, progress_percentage: progressPercentage }),\r\n    });\r\n    if (!response.ok) throw new Error(\"Failed to update task status\");\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating task status:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchProjects = async () => {\r\n  const response = await fetch(`${API_BASE_URL}/api/projects`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch projects\");\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const createTask = async (taskData) => {\r\n  const response = await fetch(`${API_BASE_URL}/api/tasks`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // Add authentication headers if needed\r\n    },\r\n    body: JSON.stringify(taskData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to create task\");\r\n  }\r\n  return response.json();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}